// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: user_service.go

package vmock

import (
	sync "sync"

	github_com_podhmo_sandbox_go_mock_sandbox_user "github.com/podhmo-sandbox/go-mock-sandbox/user"
)

// UserService is a mock of UserService interface
type UserService struct {
	lockGet sync.Mutex
	GetFunc func(id string) (*github_com_podhmo_sandbox_go_mock_sandbox_user.User, error)

	calls struct {
		Get []struct {
			Id string
		}
	}
}

// Get mocks base method by wrapping the associated func.
func (m *UserService) Get(id string) (*github_com_podhmo_sandbox_go_mock_sandbox_user.User, error) {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	if m.GetFunc == nil {
		panic("mocker: UserService.GetFunc is nil but UserService.Get was called.")
	}

	call := struct {
		Id string
	}{
		Id: id,
	}

	m.calls.Get = append(m.calls.Get, call)

	return m.GetFunc(id)
}

// GetCalled returns true if Get was called at least once.
func (m *UserService) GetCalled() bool {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return len(m.calls.Get) > 0
}

// GetCalls returns the calls made to Get.
func (m *UserService) GetCalls() []struct {
	Id string
} {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return m.calls.Get
}

// Reset resets the calls made to the mocked methods.
func (m *UserService) Reset() {
	m.lockGet.Lock()
	m.calls.Get = nil
	m.lockGet.Unlock()
}
